x = c(1, 2, 3, 4)
plot(x)
lines(x)
array = c()
array = c()
for (i in c(1:10)) {
x = sample(1:6, i, replace = TRUE)
y = mean(x)
array <- append(array, y)
}
array
lines(array)
lines(array, y = c(1:length(array)))
lines(array, y = c(1:length(array)))
lines(array, y = c(1:length(array)))
lines(array, c(1:length(array)))
lines(c(1:length(array)), array)
lines(c(1:length(array)), array)
lines(array)
lines(array)
lines(array, c(1:length(array)))
for (i in c(1:10)) {
x = sample(1:6, i, replace = TRUE)
y = mean(x)
index <- append(index, i)
array <- append(array, y)
}
index = c()
for (i in c(1:10)) {
x = sample(1:6, i, replace = TRUE)
y = mean(x)
index <- append(index, i)
array <- append(array, y)
}
plot(index, array)
array = c()
index = c()
for (i in c(1:10)) {
x = sample(1:6, i, replace = TRUE)
y = mean(x)
index <- append(index, i)
array <- append(array, y)
}
plot(index, array)
lines(index, array)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
array = c()
index = c()
n = 10
for (i in c(1:n)) {
x = sample(1:6, i, replace = TRUE)
y = mean(x)
index <- append(index, i)
array <- append(array, y)
}
graf = lines(index, array)
plot.new()
graf = lines(index, array)
graf
plot.new()
lines(index, array)
plot.new(lines(index, array))
source('~/.active-rstudio-document', echo=TRUE)
plot(index, array)
plot(index, array, l)
plot(index, array, type = "l")
array = c()
index = c()
n = 10
for (i in c(1:n)) {
x = sample(1:6, i, replace = TRUE)
y = mean(x)
index <- append(index, i)
array <- append(array, y)
}
plot(index, array, type = "l")
array = c()
index = c()
n = 50
for (i in c(1:n)) {
x = sample(1:6, i, replace = TRUE)
y = mean(x)
index <- append(index, i)
array <- append(array, y)
}
plot(index, array, type = "l")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
y
source('~/.active-rstudio-document', echo=TRUE)
plot(y)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
teste = c("cara", "coroa", "cara")
barplot(teste)
plot(teste)
plot(teste)
barplot(table(teste))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
barplot(table(array), ylim = c(0, 20))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
soma = c()
source('~/.active-rstudio-document', echo=TRUE)
n = 10
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(3.5, type = "l")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
plot()
plot(NULL)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
plot(NULL)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
plot(NULL)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
set.seed(123)
x = rnorm(1000)
# Rodar com ctrl + shift + enter
qqnorm(x)
# linha
qqline(x)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
library(semTools)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
# Valor de p acima de 0.05, não há indício para a não confirmar a hipótese nula de dados normalmente distribuídos
shapiro.test(x)
# Rodar com ctrl + shift + enter
hist(x, main = "")
par(new = TRUE)
plot(density(x), ylab = "", xlab = "", axes = F, lwd = 2.5)
# Rodar com ctrl + shift + enter
library(semTools)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
qqnorm(m)
qqline(m)
lst = rep(0, 500)
lst = rep(0, 500)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
hist(m)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
hist(m)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
hist(m)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
hist(m)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
hist(m)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# Executar com ctrl + shift + enter
split.screen(figs = c(2, 2))
screen(1)
plot(trees$Girth, trees$Volume)
screen(2)
plot(trees$Girth, trees$Height)
screen(3)
plot(trees$Height, trees$Volume)
screen(4)
hist(trees$Volume)
close.screen(all = TRUE)
# Executar com ctrl + shift + enter
split.screen(figs = c(2, 2))
screen(1)
plot(trees$Girth, trees$Volume)
screen(2)
plot(trees$Girth, trees$Height)
screen(3)
plot(trees$Height, trees$Volume)
screen(4)
hist(trees$Volume)
close.screen(all = TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
Sys.sleep(0.05)
n = 500
lst = c()
for (i in 1:n) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
lst = append(lst, mean(m))
split.screen(figs = c(1, 2))
screen(1)
hist(m, main = "Amostra M")
legend("topright", legend = paste("Média = ", toString(mean(m))))
screen(2)
hist(lst, main = "Distribuição Normal")
close.screen(all = TRUE)
Sys.sleep(0.05)
}
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
hist(lst, main = "Distribuição Normal")
par(new = T)
plot(density(lst))
hist(lst, main = "Distribuição Normal")
par(new = T)
plot(density(lst), main = "", xlab = "", ylab = "")
hist(lst, main = "Distribuição Normal")
par(new = T)
plot(density(lst), main = "", xlab = "", ylab = "", axes = F)
n = 500
lst = c()
for (i in 1:n) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
lst = append(lst, mean(m))
split.screen(figs = c(1, 2))
screen(1)
hist(m, main = "Amostra M")
legend("topright", legend = paste("Média = ", toString(mean(m))))
screen(2)
hist(lst, main = "Distribuição Normal")
close.screen(all = TRUE)
Sys.sleep(0.05)
}
hist(lst, main = "Distribuição Normal")
par(new = T)
plot(density(lst), main = "", xlab = "", ylab = "", axes = F)
shapiro.test(m)
# Rodar com ctrl + shift + enter
hist(x, main = "")
# Rodar com ctrl + shift + enter
hist(m, main = "")
par(new = TRUE)
plot(density(x), ylab = "", xlab = "", axes = F, lwd = 2.5)
# Rodar com ctrl + shift + enter
hist(m, main = "")
par(new = TRUE)
plot(density(m), ylab = "", xlab = "", axes = F, lwd = 2.5)
x = sample(1:6, 6, replace = T)
mean(x)
x = sample(1:6, 6, replace = T)
mean(x)
x = sample(1:6, 6, replace = T)
mean(x)
x = sample(1:6, 6, replace = T)
mean(x)
x = sample(1:6, 6, replace = T)
mean(x)
x = sample(1:6, 6, replace = T)
mean(x)
x = sample(1:6, 6, replace = T)
mean(x)
x = sample(1:6, 6, replace = T)
mean(x)
x = sample(1:6, 10000, replace = T)
mean(x)
x = sample(1:6, 10000, replace = T)
mean(x)
x = sample(1:6, 10000, replace = T)
mean(x)
x = sample(1:6, 10000, replace = T)
mean(x)
x = sample(1:6, 10000, replace = T)
mean(x)
x = sample(1:6, 10000, replace = T)
mean(x)
cor(x, y)
x = c(15,18,20,25,30,44)
y = C(240,255,270,283,300,310)
cor(x, y)
y = C(240,255,270,283,300,310)
y = C(240,255,270,283,300,310)
x = c(15, 18, 20, 25, 30, 44)
y = C(240, 255, 270, 283, 300, 310)
y = c(240, 255, 270, 283, 300, 310)
cor(x, y)
r = cor(women$height, women$weight)
women
sd_height = sd(women$height)
sd_weight = sd(women$weight)
m = sd_weight/sd_height
b = mean(women$weight) -m*mean(women$height)
b+(m*30)
m = r*(sd_weight/sd_height)
b = mean(women$weight) -m*mean(women$height)
b+(m*30)
r = cor(women$weight, women$height)
sd_height = sd(women$height)
sd_weight = sd(women$weight)
m = r*(sd_height/sd_weight)
b = mean(women$height) (-m*mean(women$weight))
b+(m*30)
b = mean(women$height) -m*mean(women$weight)
b+(m*30)
b+(m*70)
r = cor(women$height, women$weight)
sd_height = sd(women$height)
sd_weight = sd(women$weight)
m = r*(sd_weight/sd_height)
b = mean(women$weight) -m*mean(women$height)
b+(m*70)
prevereleicao$RESULT >= 0.5
eleicao = read.csv("Eleicao.csv", sep = ";", header = T)
eleicao
arima
library(forecast)
install.packages("forecast")
library(forecast)
install.packages("forecast")
library(forecast)
remove.packages("forecast")
install.packages("forecast")
library(forecast)
install.packages("forecast")
library(forecast)
library(forecast)
library(forecast)
library(forecast)
library(forecast)
.libPaths()
remove.packages("forecast")
install.packages("forecast")
library(forecast)
library(forecast)
.libPaths()
.libPaths("C:/Program Files/R/R-4.0.2/library")
.libPaths()
install.packages("forecast")
install.packages("forecast")
library(forecast)
install.packages("forecast")
library(forecast)
library(foreach)
detach("package:foreach", unload = TRUE)
library(forecast)
install.packages(c("backports", "callr", "glue", "gplots", "jsonlite", "knitr", "processx", "ps", "stringi", "tinytex", "vctrs", "withr", "xfun", "xlsx"))
install.packages(c("backports", "callr", "glue", "gplots", "jsonlite", "knitr", "processx", "ps", "stringi", "tinytex", "vctrs", "withr", "xfun", "xlsx"))
install.packages(c("backports", "callr", "glue", "gplots", "jsonlite", "knitr", "processx", "ps", "stringi", "tinytex", "vctrs", "withr", "xfun", "xlsx"))
install.packages(c("backports", "callr", "glue", "gplots", "jsonlite", "knitr", "processx", "ps", "stringi", "tinytex", "vctrs", "withr", "xfun", "xlsx"))
install.packages(c("backports", "callr", "glue", "gplots", "jsonlite", "knitr", "processx", "ps", "stringi", "tinytex", "vctrs", "withr", "xfun", "xlsx"))
install.packages(c("backports", "callr", "glue", "gplots", "jsonlite", "knitr", "processx", "ps", "stringi", "tinytex", "vctrs", "withr", "xfun", "xlsx"))
install.packages(c("backports", "callr", "glue", "gplots", "jsonlite", "knitr", "processx", "ps", "stringi", "tinytex", "vctrs", "withr", "xfun", "xlsx"))
install.packages(c("backports", "callr", "glue", "gplots", "jsonlite", "knitr", "processx", "ps", "stringi", "tinytex", "vctrs", "withr", "xfun", "xlsx"))
install.packages(c("backports", "callr", "glue", "gplots", "jsonlite", "knitr", "processx", "ps", "stringi", "tinytex", "vctrs", "withr", "xfun", "xlsx"))
library(forecast)
library(forecast)
install.packages("factoextra")
library(factoextra)
iris
cluster = kmeans(iris[1:4], centers = 3)
cluster
table(iris$Species, cluster$cluster)
plot(iris$Sepal.Length, iris$Sepal.Width, col = cluster$cluster, pch = 20, main = "Iris")
plot(iris[, 1:4], col = cluster$cluster, main = "Iris")
g2 = fviz_cluster(cluster, data = iris[1:4], ellipse.type = "convex", ggtheme = theme_bw(), main = "Cluster")
plot(g2)
plot(iris$Sepal.Length, iris$Sepal.Width, col = cluster$cluster, pch = 20, main = "Iris")
plot(iris[, 1:4], col = cluster$cluster, main = "Iris")
iris2 = iris
iris2['grupos'] = cluster$cluster
iris2
setwd("~/Estudos/Formação Cientista de Dados com Python e R (Udemy)/Seção 30 - Prática em R - Machine Learning")
install.packages("RColorBrewer")
library(factoextra)
library(e1071)
library(RColorBrewer)
cluster = cmeans(iris[, 1:4], centers = 3)
cluster$membership
heatmap(cluster$membership, Colv = NA, Rowv = NA, col = brewer.pal(n = 9, name = "Yl0rRd"))
heatmap(cluster$membership, Colv = NA, Rowv = NA, col = brewer.pal(n = 9, name = "YlOrRd"))
table(iris$Species, cluster$cluster)
g = fviz_cluster(list(data = iris[, 1:4], cluster = cluster$cluster), ellipse.type = "norm", ggtheme = theme_bw(), main = "Cluster")
plot(g)
library(cluster)
library(factoextra)
cluster = pam(iris[, 1:4], k = 3)
cluster
plot(cluster)
table(iris$Species, cluster$clustering)
plot(cluster)
g = fviz_cluster(list(data = iris[, 1:4], cluster = cluster$cluster), ellipse.type = "norma", ggtheme = theme_bw(), main = "Cluster")
plot(g)
g = fviz_cluster(list(data = iris[, 1:4], cluster = cluster$cluster), ellipse.type = "norm", ggtheme = theme_bw(), main = "Cluster")
plot(g)
install.packages("gridExtra", dependencies = T)
library(gridExtra)
library(factoextra)
hc = hcut(iris[, -5], k = 3, hc_method = "complete", stand = T)
hc
plot(hc)
g2 = fviz_cluster(hc, ellipse.type = "norm", ggtheme = theme_bw(), main = "Cluster Hierárquico")
plot(g2)
g1 = fviz_dend(hc, show_labels = FALSE, rect = TRUE, ggtheme = theme_bw(), main = "Cluster Hierárquico")
g1 = fviz_dend(hc, show_labels = FALSE, rect = TRUE, ggtheme = theme_bw(), main = "Cluster Hierárquico")
plot(g1)
# Executar com ctrl + shift + enter
plot(g1)
# Executar com ctrl + shift + enter
plot(g1)
plot(g2)
install.packages("arules")
install.packages("arulesViz")
library(arules)
library(arulesViz)
transacoes = read.transactions("transacoes.txt", format = "basket", sep = ",")
transacoes
inspect(transacoes)
image(transacoes)
regras = apriori(transacoes, parameter = list(supp = 0.5, conf = 0.5, minlen = 2))
regras
summary(regras)
inspect(regras)
plot(regras, method = "graph", control = list(type = "items"))
plot(regras, method = "matrix", control = list(type = "items"))
plot(regras, method = "matrix3D")
plot(regras, method = "graph", control = list(type = "items"))
library(arules)
library(arulesViz)
transacoes <- read.transactions("transacoes.txt", format = "basket", sep = ",")
image(transacoes)
regras = eclat(transacoes, parameter = list(minlen = 2))
inspect(regras)
plot(regras, method = "graph", control = list(type = "items"))
