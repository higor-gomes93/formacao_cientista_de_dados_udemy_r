x = [1, 2, 3, 4]
plot(x)
x = c(1, 2, 3, 4)
plot(x)
lines(x)
array = c()
array = c()
for (i in c(1:10)) {
x = sample(1:6, i, replace = TRUE)
y = mean(x)
array <- append(array, y)
}
array
lines(array)
lines(array, y = c(1:length(array)))
lines(array, y = c(1:length(array)))
lines(array, y = c(1:length(array)))
lines(array, c(1:length(array)))
lines(c(1:length(array)), array)
lines(c(1:length(array)), array)
lines(array)
lines(array)
lines(array, c(1:length(array)))
for (i in c(1:10)) {
x = sample(1:6, i, replace = TRUE)
y = mean(x)
index <- append(index, i)
array <- append(array, y)
}
index = c()
for (i in c(1:10)) {
x = sample(1:6, i, replace = TRUE)
y = mean(x)
index <- append(index, i)
array <- append(array, y)
}
plot(index, array)
array = c()
index = c()
for (i in c(1:10)) {
x = sample(1:6, i, replace = TRUE)
y = mean(x)
index <- append(index, i)
array <- append(array, y)
}
plot(index, array)
lines(index, array)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
array = c()
index = c()
n = 10
for (i in c(1:n)) {
x = sample(1:6, i, replace = TRUE)
y = mean(x)
index <- append(index, i)
array <- append(array, y)
}
graf = lines(index, array)
plot.new()
graf = lines(index, array)
graf
plot.new()
lines(index, array)
plot.new(lines(index, array))
source('~/.active-rstudio-document', echo=TRUE)
plot(index, array)
plot(index, array, l)
plot(index, array, type = "l")
array = c()
index = c()
n = 10
for (i in c(1:n)) {
x = sample(1:6, i, replace = TRUE)
y = mean(x)
index <- append(index, i)
array <- append(array, y)
}
plot(index, array, type = "l")
array = c()
index = c()
n = 50
for (i in c(1:n)) {
x = sample(1:6, i, replace = TRUE)
y = mean(x)
index <- append(index, i)
array <- append(array, y)
}
plot(index, array, type = "l")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
y
source('~/.active-rstudio-document', echo=TRUE)
plot(y)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
teste = c("cara", "coroa", "cara")
barplot(teste)
plot(teste)
plot(teste)
barplot(table(teste))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
barplot(table(array), ylim = c(0, 20))
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
soma = c()
source('~/.active-rstudio-document', echo=TRUE)
n = 10
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
plot(3.5, type = "l")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
plot()
plot(NULL)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
plot(NULL)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
plot(NULL)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
set.seed(123)
x = rnorm(1000)
# Rodar com ctrl + shift + enter
qqnorm(x)
# linha
qqline(x)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
library(semTools)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
# Valor de p acima de 0.05, não há indício para a não confirmar a hipótese nula de dados normalmente distribuídos
shapiro.test(x)
# Rodar com ctrl + shift + enter
hist(x, main = "")
par(new = TRUE)
plot(density(x), ylab = "", xlab = "", axes = F, lwd = 2.5)
# Rodar com ctrl + shift + enter
library(semTools)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
qqnorm(m)
qqline(m)
lst = rep(0, 500)
lst = rep(0, 500)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
hist(m)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
hist(m)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
hist(m)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
hist(m)
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
hist(m)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
# Executar com ctrl + shift + enter
split.screen(figs = c(2, 2))
screen(1)
plot(trees$Girth, trees$Volume)
screen(2)
plot(trees$Girth, trees$Height)
screen(3)
plot(trees$Height, trees$Volume)
screen(4)
hist(trees$Volume)
close.screen(all = TRUE)
# Executar com ctrl + shift + enter
split.screen(figs = c(2, 2))
screen(1)
plot(trees$Girth, trees$Volume)
screen(2)
plot(trees$Girth, trees$Height)
screen(3)
plot(trees$Height, trees$Volume)
screen(4)
hist(trees$Volume)
close.screen(all = TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
Sys.sleep(0.05)
n = 500
lst = c()
for (i in 1:n) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
lst = append(lst, mean(m))
split.screen(figs = c(1, 2))
screen(1)
hist(m, main = "Amostra M")
legend("topright", legend = paste("Média = ", toString(mean(m))))
screen(2)
hist(lst, main = "Distribuição Normal")
close.screen(all = TRUE)
Sys.sleep(0.05)
}
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
hist(lst, main = "Distribuição Normal")
par(new = T)
plot(density(lst))
hist(lst, main = "Distribuição Normal")
par(new = T)
plot(density(lst), main = "", xlab = "", ylab = "")
hist(lst, main = "Distribuição Normal")
par(new = T)
plot(density(lst), main = "", xlab = "", ylab = "", axes = F)
n = 500
lst = c()
for (i in 1:n) {
m = mvrnonnorm(1000, c(1, 2), matrix(c(10, 2, 2, 5), 2, 2), skewness = c(5, 2), kurtosis = c(3, 3))
lst = append(lst, mean(m))
split.screen(figs = c(1, 2))
screen(1)
hist(m, main = "Amostra M")
legend("topright", legend = paste("Média = ", toString(mean(m))))
screen(2)
hist(lst, main = "Distribuição Normal")
close.screen(all = TRUE)
Sys.sleep(0.05)
}
hist(lst, main = "Distribuição Normal")
par(new = T)
plot(density(lst), main = "", xlab = "", ylab = "", axes = F)
shapiro.test(m)
# Rodar com ctrl + shift + enter
hist(x, main = "")
# Rodar com ctrl + shift + enter
hist(m, main = "")
par(new = TRUE)
plot(density(x), ylab = "", xlab = "", axes = F, lwd = 2.5)
# Rodar com ctrl + shift + enter
hist(m, main = "")
par(new = TRUE)
plot(density(m), ylab = "", xlab = "", axes = F, lwd = 2.5)
x = sample(1:6, 6, replace = T)
mean(x)
x = sample(1:6, 6, replace = T)
mean(x)
x = sample(1:6, 6, replace = T)
mean(x)
x = sample(1:6, 6, replace = T)
mean(x)
x = sample(1:6, 6, replace = T)
mean(x)
x = sample(1:6, 6, replace = T)
mean(x)
x = sample(1:6, 6, replace = T)
mean(x)
x = sample(1:6, 6, replace = T)
mean(x)
x = sample(1:6, 10000, replace = T)
mean(x)
x = sample(1:6, 10000, replace = T)
mean(x)
x = sample(1:6, 10000, replace = T)
mean(x)
x = sample(1:6, 10000, replace = T)
mean(x)
x = sample(1:6, 10000, replace = T)
mean(x)
x = sample(1:6, 10000, replace = T)
mean(x)
cor(x, y)
x = c(15,18,20,25,30,44)
y = C(240,255,270,283,300,310)
cor(x, y)
y = C(240,255,270,283,300,310)
y = C(240,255,270,283,300,310)
x = c(15, 18, 20, 25, 30, 44)
y = C(240, 255, 270, 283, 300, 310)
y = c(240, 255, 270, 283, 300, 310)
cor(x, y)
r = cor(women$height, women$weight)
women
sd_height = sd(women$height)
sd_weight = sd(women$weight)
m = sd_weight/sd_height
b = mean(women$weight) -m*mean(women$height)
b+(m*30)
m = r*(sd_weight/sd_height)
b = mean(women$weight) -m*mean(women$height)
b+(m*30)
r = cor(women$weight, women$height)
sd_height = sd(women$height)
sd_weight = sd(women$weight)
m = r*(sd_height/sd_weight)
b = mean(women$height) (-m*mean(women$weight))
b+(m*30)
b = mean(women$height) -m*mean(women$weight)
b+(m*30)
b+(m*70)
r = cor(women$height, women$weight)
sd_height = sd(women$height)
sd_weight = sd(women$weight)
m = r*(sd_weight/sd_height)
b = mean(women$weight) -m*mean(women$height)
b+(m*70)
prevereleicao$RESULT >= 0.5
eleicao = read.csv("Eleicao.csv", sep = ";", header = T)
eleicao
arima
library(forecast)
install.packages("forecast")
library(forecast)
install.packages("forecast")
library(forecast)
remove.packages("forecast")
install.packages("forecast")
library(forecast)
install.packages("forecast")
library(forecast)
library(forecast)
library(forecast)
library(forecast)
library(forecast)
.libPaths()
remove.packages("forecast")
install.packages("forecast")
library(forecast)
library(forecast)
.libPaths()
.libPaths("C:/Program Files/R/R-4.0.2/library")
.libPaths()
install.packages("forecast")
install.packages("forecast")
library(forecast)
install.packages("forecast")
library(forecast)
library(foreach)
detach("package:foreach", unload = TRUE)
library(forecast)
install.packages(c("backports", "callr", "glue", "gplots", "jsonlite", "knitr", "processx", "ps", "stringi", "tinytex", "vctrs", "withr", "xfun", "xlsx"))
install.packages(c("backports", "callr", "glue", "gplots", "jsonlite", "knitr", "processx", "ps", "stringi", "tinytex", "vctrs", "withr", "xfun", "xlsx"))
install.packages(c("backports", "callr", "glue", "gplots", "jsonlite", "knitr", "processx", "ps", "stringi", "tinytex", "vctrs", "withr", "xfun", "xlsx"))
install.packages(c("backports", "callr", "glue", "gplots", "jsonlite", "knitr", "processx", "ps", "stringi", "tinytex", "vctrs", "withr", "xfun", "xlsx"))
install.packages(c("backports", "callr", "glue", "gplots", "jsonlite", "knitr", "processx", "ps", "stringi", "tinytex", "vctrs", "withr", "xfun", "xlsx"))
install.packages(c("backports", "callr", "glue", "gplots", "jsonlite", "knitr", "processx", "ps", "stringi", "tinytex", "vctrs", "withr", "xfun", "xlsx"))
install.packages(c("backports", "callr", "glue", "gplots", "jsonlite", "knitr", "processx", "ps", "stringi", "tinytex", "vctrs", "withr", "xfun", "xlsx"))
install.packages(c("backports", "callr", "glue", "gplots", "jsonlite", "knitr", "processx", "ps", "stringi", "tinytex", "vctrs", "withr", "xfun", "xlsx"))
install.packages(c("backports", "callr", "glue", "gplots", "jsonlite", "knitr", "processx", "ps", "stringi", "tinytex", "vctrs", "withr", "xfun", "xlsx"))
library(forecast)
library(forecast)
setwd("~/Estudos/Formação Cientista de Dados com Python e R (Udemy)/Seção 33 - Prática em R - Neural Networks e Deep Learning")
install.packages("h2o")
library(h2o)
digitos <- read.csv(gzfile("test.csv.gz"), header = F)
dim(digitos)
head(digitos)
dig1 = t(matrix(unlist(digitos[20, -785]), nrow = 28, byrow = F))
dig1 = t(apply(dig1, 2, rev))
dig1
digitos[20, 785]
dig1
digitos[20, 785]
dig2 = t(matrix(unlist(digitos[2, -785]), nrow = 28, byrow = F))
dig2 = t(apply(dig2, 2, rev))
dig3 = t(matrix(unlist(digitos[3, -785]), nrow = 28, byrow = F))
dig3 = t(apply(dig3, 2, rev))
dig4 = t(matrix(unlist(digitos[4, -785]), nrow = 28, byrow = F))
dig4 = t(apply(dig4, 2, rev))
dig2
dig3
dig4
# Executar com ctrl + shift + enter
image(dig1, col = grey.colors(255))
image(dig2, col = grey.colors(255))
image(dig3, col = grey.colors(255))
image(dig4, col = grey.colors(255))
h2o.init()
treino <- h2o.importFile('train.csv.gz')
teste <- h2o.importFile('test.csv.gz')
dim(treino)
dim(teste)
dim(treino)
head(treino)
colnames(treino)
# Transforma a classe em fator
treino[, 785] <- as.factor(treino[, 785])
teste[, 785] <- as.factor(teste[, 785])
modelo <- h2o.deeplearning(x = colnames(treino[, 1:784]), y = "c785", training_frame = treino, validation_frame = teste, distribution = "AUTO", activation = "RectifierWithDropout", hidden = c(64, 64, 64), sparse = TRUE, epochs = 20)
modelo <- h2o.deeplearning(x = colnames(treino[, 1:784]), y = "C785", training_frame = treino, validation_frame = teste, distribution = "AUTO", activation = "RectifierWithDropout", hidden = c(64, 64, 64), sparse = TRUE, epochs = 20)
plot(modelo)
h2o.performance(modelo)
treino[20, 785]
pred <- h2o.predict(modelo, newdata = treino[20, 1:784])
pred$predict
dig_treino = t(matrix(unlist(treino[85, -785]), nrow = 28, byrow = F))
dig_treino = t(apply(dig_treino, 2, rev))
image(dig_treino, col = grey.colors(255))
treino[85, 785]
pred <- h2o.predict(modelo, newdata = treino[85, 1:784])
pred$predict
#install.packages('randomForest',dependencies=T)
library(randomForest)
#carrega os dados de exemplo
soja = read.csv('soybean.csv', stringsAsFactors = T)
#carrega os dados de exemplo
soja = read.csv('soybean.csv', stringsAsFactors = T)
soja
dim(soja)
#classes
unique(soja$class)
#gera dois conjuntos de dados aleatórios, para teste e treino
#com 70 e 30% das instâncias, aproximadamente
amostra = sample(2,683,replace=T, prob=c(0.7,0.3))
sojatreino = soja[amostra==1,]
sojateste = soja[amostra==2,]
#constrói o modelo usando dados de treino
floresta = randomForest(class ~ .,data=sojatreino, ntree=100,proximity=T)
floresta
#testa o modelo fazendo previsão com dados de teste
previsao = predict(floresta,sojateste)
previsao
#matriz de confusao
floresta$confusion
#Precisão
mean(floresta$confusion[,'class.error'])
