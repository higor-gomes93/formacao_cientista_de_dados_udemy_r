Ana = 8L
Paulo = 12L
if (Ana > Paulo){
print("A menina é mais velha")
} else {
print("O menino é mais velho")
}
class(BOD)
14%%3
vetor = c(1:10)
vetor = c(1:10)
for (i in vetor){
if (i%%2 == 0){
print(i)
}
}
print(tail(women, n = 10))
women
Ana = 8L
Paulo = 12L
if (Ana > Paulo){
print("A menina é mais velha")
} else {
print("O menino é mais velho")
}
Ana = 8L
Paulo = 12L
if (Ana > Paulo){
print("A menina é mais velha")
} else {
print("O menino é mais velho")
}
Ana = 8L
Paulo = 12L
if (Ana > Paulo){
print("A menina é mais velha")
} else {
print("O menino é mais velho")
}
print(tail(women, n = 10))
plot(iris$Sepal.Width[50:100, ], iris$Petal.Length[50:100, ])
plot(iris$Sepal.Width[c(50:100), ], iris$Petal.Length[c(50:100), ])
plot(c(iris$Sepal.Width[c(50:100), ], iris$Petal.Length[c(50:100), ])
plot(c(iris$Sepal.Width[c(50:100), ], iris$Petal.Length[c(50:100), ]))
novairis = iris(50:100, c(2, 3))
novairis = iris[50:100, c(2, 3)]
plot(novairis)
vetor_soma = c()
vetor_1 = c(1, 3, 5, 7, 9)
vetor_2 = c(2, 4, 6, 8, 10)
vetor_1 = c(1, 3, 5, 7, 9)
vetor_2 = c(2, 4, 6, 8, 10)
vetor_soma = c()
for (i in c(1:5)){
append(vetor_soma, vetor_1[i]+vetor_2[i])
}
vetor_soma
vetor_1 = c(1, 3, 5, 7, 9)
vetor_2 = c(2, 4, 6, 8, 10)
vetor_soma = c()
for (i in c(1:5)){
print(i)
}
vetor_soma
vetor_1 = c(1, 3, 5, 7, 9)
vetor_2 = c(2, 4, 6, 8, 10)
vetor_soma = c()
for (i in c(1:5)){
append(vetor_soma, vetor_1[i], after = length(vetor_soma))
}
vetor_soma
vetor_1 = c(1, 3, 5, 7, 9)
vetor_2 = c(2, 4, 6, 8, 10)
vetor_soma = c()
for (i in c(1:5)){
vetor_1[i]
}
vetor_soma
vetor_1 = c(1, 3, 5, 7, 9)
vetor_2 = c(2, 4, 6, 8, 10)
vetor_soma = c()
for (i in c(1:5)){
vetor_1[i]
}
vetor_1[2]
vetor_1 = c(1, 3, 5, 7, 9)
vetor_2 = c(2, 4, 6, 8, 10)
vetor_soma = c()
for (i in c(1:5)){
print(vetor_1[i])
}
vetor_1 = c(1, 3, 5, 7, 9)
vetor_2 = c(2, 4, 6, 8, 10)
vetor_soma = c()
for (i in c(1:5)){
print(vetor_1[i]+vetor_2[i])
}
vetor_1 = c(1, 3, 5, 7, 9)
vetor_2 = c(2, 4, 6, 8, 10)
vetor_soma = c()
for (i in c(1:5)){
print(vetor_1[i]+vetor_2[i])
}
append(vetor_soma, 1, after = length(vetor_soma))
vetor_soma
vetor_1 = c(1, 3, 5, 7, 9)
vetor_2 = c(2, 4, 6, 8, 10)
vetor_soma = c()
for (i in c(1:5)){
print(vetor_1[i]+vetor_2[i])
}
append(vetor_soma, 1, after = length(vetor_soma))
vetor_1 = c(1, 3, 5, 7, 9)
vetor_2 = c(2, 4, 6, 8, 10)
vetor_soma = c()
vetor_soma
for (i in c(1:5)){
print(vetor_1[i]+vetor_2[i])
}
vetor_soma = append(vetor_soma, 1, after = length(vetor_soma))
vetor_soma
vetor_1 = c(1, 3, 5, 7, 9)
vetor_2 = c(2, 4, 6, 8, 10)
vetor_soma = c()
for (i in c(1:5)){
vetor_soma = append(vetor_soma, vetor_1[i]+vetor_2[i], after = length(vetor_soma))
}
vetor_soma
vetor_1 = c(1, 3, 5, 7, 9)
vetor_2 = c(2, 4, 6, 8, 10)
vetor_soma = c()
for (i in c(1:5)){
vetor_soma = append(vetor_soma, vetor_1[i]+vetor_2[i], after = length(vetor_soma))
}
vetor_soma
#ou
vetor_soma = vetor_1 + vetor_2
co2
nrow(CO2)
ncol(CO2)
rownames(CO2)
colnames(CO2)
nrow(CO2)
ncol(CO2)
rownames(CO2)
colnames(CO2)
# Importa dados, string vazio como NA, string como fatores
dados = read.csv("Churn.csv", sep = ";", na.strings = "", stringsAsFactors = TRUE)
head(dados)
summary(dados)
# Dar nomes corretos às colunas
colnames(dados) = c("Id", "Score", "Estado", "Genero", "Idade", "Patrimonio", "Saldo", "Produtos", "TemCartCredito", "Ativo", "Salario", "Saiu")
head(dados)
# Estados
counts = table(dados$Estado)
barplot(counts, main = "Estados", xlab = "Estados")
# Gênero
counts = table(dados$Genero)
barplot(counts, main = "Gêneros", xlab = "Gêneros")
# Score
summary(dados$Score)
boxplot(dados$Score)
hist(dados$Score)
# Idade
summary(dados$Idade)
boxplot(dados$Idade)
hist(dados$Idade)
# Saldo
summary(dados$Saldo)
boxplot(dados$Saldo)
hist(dados$Saldo)
# Salário
summary(dados$Salario)
boxplot(dados$Salario)
boxplot(dados$Salario, outline = FALSE)
# Valores faltantes NAs
dados[!complete.cases(dados), ]
# Tratar salários
summary(dados$Salario)
# Ver mediana
median(dados$Salario, na.rm = TRUE)
# Atribuir mediana a NAs
dados[is.na(dados$Salario), ]$Salario = median(dados$Salario, na.rm = TRUE)
# Buscar NAs em Salario para checar
dados[!complete.cases(dados$Salario), ]
# Ver valores
unique(dados$Genero)
summary(dados$Genero)
# Transformar F e Fem em Feminino
# Transformar "" e M em Masculino (moda)
dados[is.na(dados$Genero) | dados$Genero == "M", ]$Genero = "Masculino"
dados[dados$Genero == "F" | dados$Genero == "Fem", ]$Genero = "Feminino"
# Ver resultados
summary(dados$Genero)
# Remover levels não utilizados
dados$Genero = factor(dados$Genero)
# Visualizar novamente
summary(dados$Genero)
# Visualizar os dados
summary(dados$Idade)
# Fora do domínio, numérico - ver idades anormais
dados[dados$Idade < 0 | dados$Idade > 110, ]$Idade
# Não temos idade NAs
dados[is.na(dados$Idade), ]$Idade
# Opção, preencher com a mediana
median(dados$Idade)
# Substituição
dados[dados$Idade < 0 | dados$Idade > 110, ]$Idade = median(dados$Idade)
# Buscando novamente idades anormais
dados[dados$Idade < 0 | dados$Idade > 110, ]$Idade
summary(dados$Idade)
# Buscar duplicados pelo ID
x = dados[duplicated(dados$Id)]
# Buscar duplicados pelo ID
x = dados[duplicated(dados$Id), ]
x
setwd("~/Estudos/Formação Cientista de Dados com Python e R (Udemy)/Seção 9 - Prática em R - Limpeza e Tratamento de Dados")
# Verificamos que o ID 81 está duplicado
# Vamos excluir pelo ID, não pelo índice
dados = dados[!dados$Id %in% c(x$Id), ]
# Buscamos a linha que estava duplicada
dados[dados$Id == x$Id]
# Buscamos a linha que estava duplicada
dados[dados$Id == x$Id, ]
# Verificamos novamente duplicados
x = dados[duplicated(dados$Id), ]
x
# Fora do domínio - categórico
unique(dados$Estado)
summary(dados$Estado)
# Preencher com a moda, RS
dados[!dados$Estado %in% c("RS", "SC", "PR"), ]$Estado = "RS"
summary(dados$Estado)
# Removendo os fatores não usados
dados$Estado = factor(dados$Estado)
# Visualizando novamente
summary(dados$Estado)
# Outra forma, resultado semelhante, mas sem os NAs
boxplot(dados$Salario)
x = boxplot(dados$Salario)$out
x
# Outliers, criando um parâmetro com desvio padrão
desv = sd(dados$Salario, na.rm = TRUE)
dados[dados$Salario >= 2*desv, ]$Salario
# Atualizamos todos para mediana
median(dados$Salario)
dados[dados$Salario >= 2*desv, ]$Salario = median(dados$Salario)
# Checamos se saíram os outliers
dados[dados$Salario >= 2*desv, ]$Salario
# Outliers, criando um parâmetro com desvio padrão
desv = sd(dados$Salario, na.rm = TRUE)
desv
boxplot(dados$Salario)
dados = read.csv("tempo.csv", sep = ";", na.strings = "", stringsAsFactors = TRUE)
dados
dados = read.csv("tempo.csv", sep = ";", na.strings = "", stringsAsFactors = TRUE)
dados
View(dados)
colnames(dados)
# Os nomes já estão adequados
head(dados)
head(dados)
summary(dados)
head(dados)
# Aparência
grafico_1 = table(dados$Aparencia)
barplot(grafico_1, main = "Aparência", xlab = "Aparência")
# Vento
grafico_2 = table(dados$Vento)
barplot(grafico_2, main = "Vento", xlab = "Vento")
# Jogar
grafico_3 = table(dados$Jogar)
barplot(grafico_3, main = "Jogar", xlab = "Jogar")
# Temperatura
summary(dados$Temperatura)
boxplot(dados$Temperatura)
hist(dados$Temperatura)
boxplot(dados$Temperatura, outline = FALSE)
# Umidade
summary(dados$Umidade)
boxplot(dados$Umidade)
boxplot(dados$Umidade, outline = FALSE)
hist(dados$Umidade)
# Checando onde estão os valores faltantes
dados[!complete.cases(dados), ]
View(dados)
# Checando onde estão os valores faltantes
dados[!complete.cases(dados), ]
unique(dados$Aparencia)
# De acordo com o enunciado, temos apenas os levels chuva, nublado e sol
summary(dados$Aparencia)
# Substituindo o level "menos" pela moda (chuva)
dados[dados$Aparencia == "menos", ]$Aparencia = "chuva"
# Visualizando novamente
summary(dados$Aparencia)
# Removendo os levels não utilizados
dados$Aparencia = factor(dados$Aparencia)
# Checando
unique(dados$Aparencia)
summary(dados$Aparencia)
barplot(dados$Aparencia)
barplot(table(dados$Aparencia))
summary(dados$Temperatura)
# Encontrando a mediana
median(dados$Temperatura)
# Encontrar temperaturas fora do domínio
dados[dados$Temperatura < -130 | dados$Temperatura > 130, ]$Temperatura
# Encontrando a mediana
median(dados$Temperatura)
# Substituindo os dados fora do domínio pela mediana
dados[dados$Temperatura < -130 | dados$Temperatura > 130, ]$Temperatura = median(dados$Temperatura)
# Checando dados fora de domínio novamente
dados[dados$Temperatura < -130 | dados$Temperatura > 130, ]$Temperatura
# Visualizando os dados
summary(dados$Temperatura)
View(dados)
summary(dados$Umidade)
# Encontrando a mediana
median(dados$Umidade, na.rm = TRUE)
# Buscando os valores fora do domínio
dados[dados$Umidade < 0 | dados$Umidade > 100, ]$Umidade
# Buscando os valores faltantes
dados[is.na(dados$Umidade), ]$Umidade
# Buscando os valores faltantes
dados[!complete.cases(dados$Umidade)]
# Buscando os valores faltantes
dados[!complete.cases(dados$Umidade), ]
# Substituindo os valores fora de domínio e faltantes pela mediana
dados[dados$Umidade < 0 | dados$Umidade > 100 | is.na(dados$Umidade), ]$Umidade = median(dados$Umidade, na.rm = TRUE)
# Visualizando os dados novamente
summary(dados$Umidade)
dados[dados$Umidade < 0 | dados$Umidade > 100, ]$Umidade
dados[!complete.cases(dados$Umidade), ]
# Visualizando os dados
unique(dados$Vento)
summary(dados$Vento)
# Substituindo o valor NA pela moda (FALSO)
dados[is.na(dados$Vento), ]$Vento = "FALSO"
# Checando
unique(dados$Vento)
summary(dados$Vento)
barplot(table(dados$Vento))
# Visualizando os dados
unique(dados$Jogar)
summary(dados$Jogar)
